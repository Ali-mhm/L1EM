#!/bin/bash

# Script to execute L1-EM pipeline
# Copyright (C) 2019 Wilson McKerrow

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

 #   You should have received a copy of the GNU General Public License
 #   along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Usage: bash run_L1EM.sh /fullpathto/alignments.bam /fullpathto/L1EM /fullpathto/hg38.fa

# Parameters
threads=16 #How many threads to use for samtools, bwa and L1EM
realignNM=3 #Number of mismatches allowed in bwa realignment
L1EM_NM=3 # Number of mismatches allowed when enumerated candidate alignments
NMdiff=2 #Skip candidate alignments with greater than this many more mismatches than the best alignment
bwa_i=20 #bwa i parameter prevents indels near the edges of a read
error_prob=0.01 #Probability of a read error at a given position
max_start2start_len=500 #Max allowed template/fragment length
reads_per_pickle=10000 #Number of rows in each G(R) matrix chunk. Decrease if memory usage is too high.
EM_threshold=1e-7 #Keep taking EM steps until no entry in X changes by more than this value. Increasing this parameter will shorten run time.
template_fraction=1 #Fraction of reads to consider when calculated median template length.


bwa=$(which bwa)
samtools=$(which samtools)
python=$(which python)

L1EM_directory=$1   # L1EM directory path
hg38=$2             # Reference genome fasta file path

# Directory containing your BAM files
bam_dir=$3          

# Loop over BAM files
for bamfile in "$bam_dir"/*.bam
do
  echo "Processing BAM file: $bamfile"

  # Create a working directory per BAM
  base=$(basename "$bamfile" .bam)
  work_dir="./${base}_L1EM_run"
  mkdir -p "$work_dir"
  cd "$work_dir" || exit

  L1EM_bed=${L1EM_directory}/annotation/L1EM.400.bed
  L1EM_fa=${L1EM_directory}/annotation/L1EM.400.fa
  L1EM_code_dir=${L1EM_directory}/L1EM/
  L1EM_utilities_dir=${L1EM_directory}/utilities/
  L1EM_CGC_dir=${L1EM_directory}/CGC/

  echo 'STEP 1: realign'
  mkdir -p idL1reads
  cd idL1reads || exit
  $samtools view -@ $threads -b -F 2 "$bamfile" | $samtools sort -@ $threads -n - | $samtools fastq - -1 unaligned.fq1 -2 unaligned.fq2
  $bwa aln -k $realignNM -n $realignNM -t $threads -i $bwa_i $hg38 unaligned.fq1 > 1.sai
  $bwa aln -k $realignNM -n $realignNM -t $threads -i $bwa_i $hg38 unaligned.fq2 > 2.sai
  $bwa sampe $hg38 1.sai 2.sai unaligned.fq1 unaligned.fq2 | $samtools view -b -@ $threads - | $samtools sort -@ $threads - > realigned.bam
  $samtools index realigned.bam
  cd ..

  echo 'STEP 2: extract'
  $python ${L1EM_utilities_dir}read_or_pair_overlap_bed.py $L1EM_bed "$bamfile" temp.bam
  $samtools sort -@ $threads -n temp.bam | $samtools fastq - -1 L1.fq1 -2 L1.fq2
  $python ${L1EM_utilities_dir}read_or_pair_overlap_bed.py $L1EM_bed idL1reads/realigned.bam temp.bam
  $samtools sort -@ $threads -n temp.bam | $samtools fastq - -1 temp.fq1 -2 temp.fq2
  cat temp.fq1 >> L1.fq1
  cat temp.fq2 >> L1.fq2

  echo 'STEP 3: split fastq files'
  mkdir -p split_fqs
  split_fq_size=$(wc -l L1.fq1 | awk '{print int($1/('$threads'*4))+1}' | awk '{print $1*4}')
  split -l $split_fq_size L1.fq1 split_fqs/L1.fq1.
  split -l $split_fq_size L1.fq2 split_fqs/L1.fq2.

  echo 'STEP 4: candidate alignments'
  cd split_fqs || exit
  for name in *.fq1.*
  do
    reads1=$name
    reads2=$(echo $name | sed 's/fq1/fq2/g')
    base=$(echo $name | sed 's/.fq1//g')
    $bwa aln -t $threads -N -n $L1EM_NM -k $L1EM_NM -i $bwa_i -R 10000000 $L1EM_fa $reads1 > $base.R1.aln.sai
    $bwa aln -t $threads -N -n $L1EM_NM -k $L1EM_NM -i $bwa_i -R 10000000 $L1EM_fa $reads2 > $base.R2.aln.sai
  done
  for name in *.fq1.*
  do
    reads1=$name
    reads2=$(echo $name | sed 's/fq1/fq2/g')
    base=$(echo $name | sed 's/.fq1//g')
    $bwa sampe -n 10000000 -N 10000000 $L1EM_fa $base.R1.aln.sai $base.R2.aln.sai $reads1 $reads2 | $samtools view -bS - | $samtools sort -n - > $base.aln.bam &
  done
  wait
  cd ..

  echo 'STEP 5: G(R) matrix construction'
  mkdir -p G_of_R
  $python ${L1EM_CGC_dir}median_template_and_pairs.py "$bamfile" 0.001 > baminfo.txt
  medianinsert=$(head -1 baminfo.txt)
  for bam in split_fqs/*.bam
  do
    $python ${L1EM_code_dir}G_of_R.py -b "$bam" -i $medianinsert -p $(basename "$bam") -e $error_prob -m $max_start2start_len -r  $reads_per_pickle -n $NMdiff &
  done
  wait
  
  # Move output files to G_of_R directory after all processes finish
  mv *.pk2 G_of_R/ 2>/dev/null
  mv *TE_list.txt G_of_R/ 2>/dev/null

  echo 'STEP 6: EM'
  mkdir -p L1EM
  ls G_of_R/*pk2 > G_of_R_list.txt
  cp $(ls G_of_R/*TE_list.txt | head -1) TE_list.txt
  $python ${L1EM_code_dir}L1EM.py -g G_of_R_list.txt -l TE_list.txt -t $threads -s $EM_threshold

  echo 'STEP 7: Writing results'
  $python ${L1EM_utilities_dir}L1EM_readpairs.py >> baminfo.txt
  $python ${L1EM_utilities_dir}report_l1_exp_counts.py > full_counts.txt
  $python ${L1EM_utilities_dir}report_l1hs_transcription.py > l1hs_transcript_counts.txt
  $python ${L1EM_utilities_dir}filtered_and_normalized_l1hs.py names_final.pkl X_final.pkl $(head -2 baminfo.txt | tail -1) $(head -3 baminfo.txt | tail -1) > filter_L1HS_FPM.txt

  echo 'STEP 8: Cleanup'
  cp *final.pkl ../

  echo 'STEP 9: Move results into sample-specific result folder'
  mkdir -p result
  mv full_counts.txt l1hs_transcript_counts.txt filter_L1HS_FPM.txt result/


  # Go back to main directory for next BAM file
  cd ..

done

echo "All BAM files processed."
